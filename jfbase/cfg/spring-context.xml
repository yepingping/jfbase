<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.2.xsd
		http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  ">


	<context:component-scan base-package="com.jf">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath*:init.properties" />

	<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${hibernate.driverClass}" />
		<property name="driverUrl" value="${hibernate.jdbc.url}" />
		<property name="user" value="${hibernate.jdbc.user}" />
		<property name="password" value="${hibernate.jdbc.password}" />
		<!-- <alias>连接池的别名 -->
		<property name="alias" value="${hibernate.alias}" />
		<!-- 使用前进行测试,防止数据库重启使用出现异常 -->
		<property name="testBeforeUse" value="true"></property>
		<!-- proxool自动侦查各个连接状态的时间间隔(毫秒),侦查到空闲的连接就马上回收,超时的销毁(默认30秒) -->
		<property name="houseKeepingSleepTime" value="${hibernate.houseKeepingSleepTime}" />
		<!-- 数据库测试语句 -->
		<property name="houseKeepingTestSql" value="${hibernate.houseKeepingTestSql}" />
		<!-- 最少保持的空闲连接数(默认5个) -->
		<property name="prototypeCount" value="${hibernate.prototypeCount}" />
		<!-- 设置连接池生产的最大连接数/在连接池中所有数据库连接的最大数目(默认15个) -->
		<property name="maximumConnectionCount" value="${hibernate.jdbc.maxConn}" />
		<!-- 设置连接池生产的最小连接数 /在连接池中可用的数据库连接的最少数目(默认5个) -->
		<property name="minimumConnectionCount" value="${hibernate.jdbc.minConn}" />
		<!-- 设置连接超时时间 15分钟 -->
		<property name="maximumActiveTime" value="${hibernate.maximumActiveTime}"></property>
		<!-- 设定每个连接最长的存在时间默认4小时 -->
		<!-- <property name="maximumConnectionLifetime" value="14400000"></property> -->
		<!-- 在Consonl中显示sql -->
		<property name="trace" value="${hibernate.trace}" />
		<property name="verbose" value="${hibernate.verbose}" />
		<property name="delegateProperties"
			value="characterEncoding=${hibernate.characterEncoding}" />
	</bean>
	<!-- dao 拦截器 -->
	<bean id="daoInterceptor" class="com.jf.framework.interceptor.DaoInterceptor"></bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="entityInterceptor">
			<ref local="daoInterceptor" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
		<!-- 注解方式配置 -->
		<property name="packagesToScan">
			<list>
				<value>com.jf.system.model</value>
			</list>
		</property>
	</bean>
	<bean id="dataSourceFacade" class="org.logicalcobwebs.proxool.ProxoolFacade"
		destroy-method="shutdown" />

	<bean id="daoHibernateBase" class="com.jf.framework.dao.DaoHibernateBase">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="daoJdbcBase" class="com.jf.framework.dao.DaoJdbcBase">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="daoJdbcCallBase" class="com.jf.framework.dao.DaoJdbcCallBase"></bean>
	
	<!-- 配置事物管理器，在*ServiceImpl里写@Transactional就可以启用事物管理 -->
	<bean name="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />



	<!-- 使用tx标签配置的拦截器 事物 -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="create*" />
			<tx:method name="save*" />
			<tx:method name="new*" />
			<tx:method name="update*" />
			<tx:method name="modify*" />
			<tx:method name="delete*" />
			<tx:method name="remove*" />
			<tx:method name="del*" />
			<tx:method name="execute*" />
			<tx:method name="new*" />
			<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="detail*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut" expression="execution(* *..service..impl..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>

	<!-- log日志切面 -->
	<bean id="logInterceptor" class="com.jf.framework.interceptor.LogInterceptor"></bean>
	<aop:config expose-proxy="true">
		<aop:aspect ref="logInterceptor">
			<aop:around pointcut="${logs.save} or ${logs.update} or ${logs.delte}"
				method="invoke" />
		</aop:aspect>
	</aop:config>

	<bean id="jdbcExceptionTranslator"
		class="org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="simpleJdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
		<constructor-arg ref="jdbcTemplate" />
	</bean>
	<bean id="simpleJdbcCall" class="org.springframework.jdbc.core.simple.SimpleJdbcCall">
		<constructor-arg ref="jdbcTemplate" />
	</bean>
	<bean id="simpleJdbcInsert" class="org.springframework.jdbc.core.simple.SimpleJdbcInsert">
		<constructor-arg ref="jdbcTemplate" />
	</bean>

	<!-- spring 工具类 -->
	<bean id="springUtil" class="com.jf.common.utils.SpringUtil"
		scope="singleton" />
</beans>